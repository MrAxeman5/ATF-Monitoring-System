<!DOCTYPE html>
<html>

<head>
    <title>FS22 Map</title>
    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css">
    <link rel="stylesheet" href="styles/map.css">
    <script type="module" src="js/color-modes.js"></script>

    <link rel="stylesheet" href="https://cdn.rawgit.com/ardhi/Leaflet.MousePosition/master/src/L.Control.MousePosition.css">
    <!-- Add Bootstrap 5 CSS -->
    <link rel="stylesheet" href="styles/bootstrap.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js" type="text/javascript"></script>
    <script src="https://cdn.rawgit.com/ardhi/Leaflet.MousePosition/master/src/L.Control.MousePosition.js"
        type="text/javascript"></script>
    <!-- Add Bootstrap 5 JS and Popper.js -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
        integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8sh+5n6vCf5F5f5f5z5f5f5f5f5f5f5f5f5f5f5f5"
        crossorigin="anonymous" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"
        integrity="sha384-TwnJaj9qz8u5Kw5Iwjs2J9Bshj4K07hoK5fhI5f5f5f5f5f5f5f5f5f5f5f5f5f5f5"
        crossorigin="anonymous"></script>

</head>

<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">ATF Monitoring System</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Link</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                            aria-expanded="false">
                            Dropdown
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#">Action</a></li>
                            <li><a class="dropdown-item" href="#">Another action</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#">Something else here</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link disabled" aria-disabled="true">Disabled</a>
                    </li>
                </ul>
                <div class="ml-auto">
                    <img src="https://cdn-icons-png.flaticon.com/512/3177/3177440.png" alt="User Icon" width="2%" style="filter: grayscale(100%);">
                    <span>No User Found!</span>
                </div>
            </div>
        </div>
    </nav>

    <div id="container">
        <!-- Bootstrap Sidebar -->
        <div id="sidebar">

            <table class="table">
                <thead>
                    <tr>
                        <th colspan="4">Player Information</th>
                    </tr>
                    <tr>
                        <th>Player Name</th>
                        <th>Permission Level</th>
                        <th>Z Coordinate</th>
                        <th>Height</th>
                    </tr>
                </thead>

                <tbody id="player-table-body">
                    <!-- Player data will be inserted here dynamically -->
                </tbody>
            </table>

            <div class="card">
                <div id="sprite-status">Sprite Status: </div>
                <!-- This is the new header for sprite status -->
                <div id="last-update"></div>
                <!-- This is the last update timestamp -->
            </div>
            <div class="d-flex align-items-center gap-3">
                <div class="d-flex align-items-center dropdown color-modes">
                    <button class="btn btn-link px-0 text-decoration-none dropdown-toggle d-flex align-items-center"
                        id="bd-theme" type="button" aria-expanded="false" data-bs-toggle="dropdown"
                        data-bs-display="static">
                        <svg class="bi my-1 me-2 theme-icon-active"><use href="#circle-half"></use></svg>
                        <span class="ms-2" id="bd-theme-text">Toggle theme</span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bd-theme"
                        style="--bs-dropdown-min-width: 8rem;">
                        <li>
                            <button type="button" class="dropdown-item d-flex align-items-center"
                                data-bs-theme-value="light">
                                <svg class="bi me-2 opacity-50 theme-icon"><use href="#sun-fill"></use></svg>
                                Light
                                <svg class="bi ms-auto d-none"><use href="#check2"></use></svg>
                            </button>
                        </li>
                        <li>
                            <button type="button" class="dropdown-item d-flex align-items-center"
                                data-bs-theme-value="dark">
                                <svg class="bi me-2 opacity-50 theme-icon"><use href="#moon-stars-fill"></use></svg>
                                Dark
                                <svg class="bi ms-auto d-none"><use href="#check2"></use></svg>
                            </button>
                        </li>
                        <li>
                            <button type="button" class="dropdown-item d-flex align-items-center active"
                                data-bs-theme-value="auto">
                                <svg class="bi me-2 opacity-50 theme-icon"><use href="#circle-half"></use></svg>
                                Auto
                                <svg class="bi ms-auto d-none"><use href="#check2"></use></svg>
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- Bootstrap Map Container -->
        <div id="map" class="container-fluid"></div>
    </div>
<script type="text/javascript">
// Declare height and width variables for your image
var height = 2118; // Adjust to match the height of your image
var width = 2148; // Adjust to match the width of your image

// Vehicle offsets (adjust as needed)
var vehicleOffsetX = 0;
var vehicleOffsetZ = 0;

// Create the Leaflet map with maxBounds option
var map = L.map('map', {
  maxZoom: 5, // Adjust the maximum zoom level as needed
  minZoom: -2,
  crs: L.CRS.Simple,
});

// Add a custom image as the map
var imageUrl = '../images/map.png'; // Adjust the path to your image
var imageBounds = [[0, 0], [height, width]]; // Adjust the bounds of your image (height and width)
L.imageOverlay(imageUrl, imageBounds).addTo(map);

// Initialize the MousePosition control to display coordinates
L.control.mousePosition().addTo(map);

// Create an object to store markers
const markers = {};

// Create a map to store player names and their corresponding rows
const playerRows = new Map();

// Updated updateTable function
function updateTable() {
  fetch('/api/fetch-data-map')
    .then(response => response.json())
    .then(data => {
      const playerTableBody = document.getElementById('player-table-body');

      // Store the names of players and vehicles that are currently present in the updated data
      const presentPlayerNames = new Set();
      const presentVehicleNames = new Set();

      data.players.forEach(player => {
        if (player.position) {
          // Translate player coordinates to pixel positions on the map
          const pixelX = (parseFloat(player.position.x) + width / 2) * (width / 2148); // Adjust as needed
          const pixelZ = (height - (parseFloat(player.position.z) + height / 2)) * (height / 2118); // Flip the Z-coordinate
          const pixelY = parseFloat(player.position.y) * (height / 1059); // Adjust as needed for height

          // Determine the CSS class for the sprite marker based on admin status
          const spriteMarkerClass = player.isAdmin && player.isAdmin.toLowerCase() === "true" ? 'sprite-marker-admin' : 'sprite-marker';

          if (!markers[player.name]) {
            // Create a custom marker (sprite) for each player if it doesn't exist
            const spriteMarker = L.divIcon({
              className: spriteMarkerClass, // Use the determined class for styling
              iconSize: [32, 32], // Size of the sprite (adjust as needed)
              iconAnchor: [16, 16], // Center of the sprite (adjust as needed)
            });

            // Create a marker with the sprite icon
            const marker = L.marker([pixelZ, pixelX], {
              icon: spriteMarker,
            });

            // Create a tooltip for the marker (player's name)
            const tooltip = L.tooltip({
              permanent: true,
              direction: 'right',
              offset: [16, 0], // Adjust the tooltip position as needed
            }).setContent(player.name);

            // Bind the tooltip to the marker
            marker.bindTooltip(tooltip);

            // Add the marker to the map
            marker.addTo(map);

            // Store the marker with a unique key
            markers[player.name] = marker;
          } else {
            // Update the existing marker's position
            markers[player.name].setLatLng([pixelZ, pixelX]);
          }

          // Check if a row for this player already exists in the sidebar
          if (playerRows.has(player.name)) {
            // Update the existing row with new coordinates
            const playerRow = playerRows.get(player.name);
            playerRow.innerHTML = `
              <td class="player-name" data-lat="${pixelZ}" data-lng="${pixelX}">${player.name}</td>
              <td>${player.position.x}</td>
              <td>${player.position.z}</td>
              <td>${player.position.y}</td>
            `;
          } else {
            // Create a new row for the player in the sidebar
            const playerInfo = document.createElement('tr');
            playerInfo.innerHTML = `
              <td class="player-name" data-lat="${pixelZ}" data-lng="${pixelX}">${player.name}</td>
              <td>${player.position.x}</td>
              <td>${player.position.z}</td>
              <td>${player.position.y}</td>
            `;
            playerTableBody.appendChild(playerInfo);
            playerRows.set(player.name, playerInfo);
          }

          // Add the player's name to the set of present players
          presentPlayerNames.add(player.name);
        }
      });

      // Handle vehicles
      data.vehicles.forEach(vehicle => {
        // Check if this vehicle type has a specific sprite image defined
        let vehicleSpriteImage = getVehicleSpriteImage(vehicle.type);

        if (!vehicleSpriteImage) {
          // If no specific sprite image is defined, use a default image
          vehicleSpriteImage = 'images/mapsprites/vehicles.png';
        }

        // Update the vehicle's position based on the specified offset
        const vehicleX = (parseFloat(vehicle.vX) + width / 2) * (width / 2148); // Adjust as needed
        const vehicleZ = (height - (parseFloat(vehicle.vZ) + height / 2)) * (height / 2118); // Flip the Z-coordinate
        const vehicleY = parseFloat(vehicle.vY) * (height / 1059); // Adjust as needed for height

        // Create a unique identifier for the vehicle based on name and a unique field like "id"
        const vehicleMarkerKey = `${vehicle.name}_${vehicle.id}`;

        if (!markers[vehicleMarkerKey]) {
          // Create a custom marker (sprite) for each vehicle if it doesn't exist
          const vehicleSpriteMarker = L.divIcon({
            className: 'vehicle-marker',
            iconSize: [16, 16], // Size of the sprite (adjust as needed)
            iconAnchor: [16, 16], // Center of the sprite (adjust as needed)
            html: `<img src="${vehicleSpriteImage}" alt="${vehicle.name}" width="16" height="16">`, // Use the vehicle sprite image
          });

          // Create a marker with the sprite icon
          const vehicleMarker = L.marker([vehicleZ, vehicleX], {
            icon: vehicleSpriteMarker,
          });

          // Create a tooltip for the marker (vehicle's name)
          const tooltip = L.tooltip({
            permanent: false,
            direction: 'right',
            offset: [16, 0], // Adjust the tooltip position as needed
          }).setContent(vehicle.name);

          // Bind the tooltip to the marker
          vehicleMarker.bindTooltip(tooltip);

          // Add the marker to the map
          vehicleMarker.addTo(map);

          // Store the marker with the unique key
          markers[vehicleMarkerKey] = vehicleMarker;
        } else {
          // Update the existing marker's position
          markers[vehicleMarkerKey].setLatLng([vehicleZ, vehicleX]);
        }

        // Add the vehicle's name to the set of present names
        presentVehicleNames.add(vehicleMarkerKey);
      });

      // Remove markers and rows for names that are no longer present
      Object.keys(markers).forEach(name => {
        if (!presentPlayerNames.has(name) && !presentVehicleNames.has(name)) {
          // Check if the marker still exists
          if (map.hasLayer(markers[name])) {
            // Remove the marker from the map
            map.removeLayer(markers[name]);
          }

          // Check if the row still exists
          if (playerRows.has(name)) {
            // Remove the row from the sidebar
            playerTableBody.removeChild(playerRows.get(name));
          }

          // Delete the marker and row from their respective data structures
          delete markers[name];
          playerRows.delete(name);
        }
      });

      // Update the last update timestamp
      const lastUpdate = document.getElementById('last-update');
      lastUpdate.textContent = 'Last Update: ' + new Date().toLocaleTimeString();
    })
    .catch(error => {
      console.error('Error updating table:', error);
    });
}

// Function to get the sprite image for a specific vehicle type
function getVehicleSpriteImage(type) {
  // Define mappings of vehicle types to sprite images
  const vehicleTypeMappings = {
    trainTrailer:                         'images/mapsprites/train.png',
    trainTimberTrailer:                   'images/mapsprites/train.png',
    spreader:                             'images/mapsprites/tools.png',
    trailer:                              'images/mapsprites/trailers.png',
    tractor:                              'images/mapsprites/vehicles.png',
    implementDynamicMountAttacher:        'images/mapsprites/tools.png',
    shovelLeveler:                        'images/mapsprites/tools.png',
    dynamicMountAttacherTrailer:          'images/mapsprites/trailers.png',
    turnOnShovel:                         'images/mapsprites/tools.png',
    implement:                            'images/mapsprites/tools.png',
    windrower:                            'images/mapsprites/tools.png',
    baleLoader:                           'images/mapsprites/trailers.png',
    mower:                                'images/mapsprites/tools.png',
    manureSpreader:                       'images/mapsprites/tools.png',
    selfPropelledManureBarrel:            'images/mapsprites/vehicles.png',
    sowingMachine:                        'images/mapsprites/tools.png',
    roller:                               'images/mapsprites/tools.png',
    waterTrailer:                         'images/mapsprites/trailers.png',
    cutter:                               'images/mapsprites/tools.png',
    forageWagon:                          'images/mapsprites/trailers.png',
    tedder:                               'images/mapsprites/tools.png',
    attachableFrontloader:                'images/mapsprites/vehicles.png',
    vineHarvester:                        'images/mapsprites/vehicles.png',
    vinePrepruner:                        'images/mapsprites/tools.png',
    mulcher:                              'images/mapsprites/tools.png',
    combineCutterFruitPreparer:           'images/mapsprites/vehicles.png',
    cottonHarvester:                      'images/mapsprites/vehicles.png',
    fertilizingSowingMachine:             'images/mapsprites/tools.png',
    turnOnCultivator:                     'images/mapsprites/tools.png',
    balerWrapper:                         'images/mapsprites/tools.png',
    bigBag:                               'images/mapsprites/bags.png',
    combineDrivable:                      'images/mapsprites/vehicles.png',
    plow:                                 'images/mapsprites/tools.png',
    sprayer:                              'images/mapsprites/trailers.png',
    pallet:                               'images/mapsprites/pallets.png',
    teleHandler:                          'images/mapsprites/vehicles.png',
    tractorReverseDriving:                'images/mapsprites/vehicles.png',
    dynamicMountAttacherShovelLeveler:    'images/mapsprites/tools.png',
    loaderVehicle:                        'images/mapsprites/vehicles.png',
    drivableMixerWagon:                   'images/mapsprites/vehicles.png', // Add more mappings as needed
  };

  return vehicleTypeMappings[type];
}

// Initialize the map view and zoom level
map.setView([height / 2, width / 2], -2); // Center the map and adjust the initial zoom as needed

// Update the map initially and periodically
updateTable();
setInterval(updateTable, 10000);
</script>
</body>
</html>
